<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>iOS高级必备知识</title>
    <url>/2020/05/08/iOS%E9%AB%98%E7%BA%A7%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="一、UI视图"><a href="#一、UI视图" class="headerlink" title="一、UI视图"></a>一、UI视图</h3><p>1.1 、事件传递机制</p>
<p>1.2 、UI绘制原理</p>
<p>1.3 、异步绘制原理</p>
<p>1.4 、流失页面的性能优化</p>
<p>1.5 、离屏渲染</p>
<h3 id="二、OC语言"><a href="#二、OC语言" class="headerlink" title="二、OC语言"></a>二、OC语言</h3><p>2.1 、KVO</p>
<p>2.2、 KVC</p>
<p>2.3、分类</p>
<p>2.4、 关联对象</p>
<h3 id="三、Runtime"><a href="#三、Runtime" class="headerlink" title="三、Runtime"></a>三、Runtime</h3><p>3.1、 对象、类、元祖对象</p>
<p>3.2、 消息传递机制</p>
<p>3.3、消息转发流程</p>
<p>3.4、Method-Swizzing</p>
<h3 id="四、内存"><a href="#四、内存" class="headerlink" title="四、内存"></a>四、内存</h3><p>4.1、 引用计数表</p>
<p>4.2、 弱引用表</p>
<p>4.3、 ARC，MRC</p>
<p>4.4、 循环引用</p>
<p>4.5、 内存管理</p>
<h3 id="五、Block"><a href="#五、Block" class="headerlink" title="五、Block"></a>五、Block</h3><p>5.1、 Block本质</p>
<p>5.2、 截获变量特性</p>
<p>5.3、 内存管理</p>
<p>5.4、 循环应用</p>
<h3 id="六、多线程"><a href="#六、多线程" class="headerlink" title="六、多线程"></a>六、多线程</h3><p>6.1、 GCD，NSoperation</p>
<p>6.2、 资源共享</p>
<p>6.3、 线程同步</p>
<p>6.4、 SpinLock</p>
<h3 id="七、RunLoop"><a href="#七、RunLoop" class="headerlink" title="七、RunLoop"></a>七、RunLoop</h3><p>7.1、 事件循环</p>
<p>7.2、 常驻线程</p>
<h3 id="八、网络"><a href="#八、网络" class="headerlink" title="八、网络"></a>八、网络</h3><p>8.1、 HTTPS</p>
<p>8.2、 对称加密算法</p>
<p>8.3、 非对称加密算法</p>
<p>8.4、 DNS解析</p>
<p>8.5 HTTP，TCP</p>
<h3 id="九、设计模式"><a href="#九、设计模式" class="headerlink" title="九、设计模式"></a>九、设计模式</h3><p>9.1、 桥接，适配器，命令</p>
<p>9.2、 责任链，单例</p>
<p>9.3、 六大设计原则</p>
<h3 id="十、架构-框架"><a href="#十、架构-框架" class="headerlink" title="十、架构/框架"></a>十、架构/框架</h3><p>10.1、 MVVM，时长统计框架</p>
<p>10.2、 图片缓存框架</p>
<p>10.3、 PV量级10亿业务架构</p>
<h3 id="十一、算法"><a href="#十一、算法" class="headerlink" title="十一、算法"></a>十一、算法</h3><p>11.1、 字符串反转</p>
<p>11.2、 单链表反转</p>
<p>11.3、 有序数组递归</p>
<p>11.4、 无序数组找中位</p>
<h3 id="十二、第三方库"><a href="#十二、第三方库" class="headerlink" title="十二、第三方库"></a>十二、第三方库</h3><p>12.1、 AFNETworking<br><strong>…</strong></p>
<h3 id="十三、跨平台-最少会其一"><a href="#十三、跨平台-最少会其一" class="headerlink" title="十三、跨平台(最少会其一)"></a>十三、跨平台(最少会其一)</h3><p>13.1、 RN</p>
<p>13.2、 Flutter</p>
<p>13.3、 Weex</p>
<h3 id="十四、加分项（不会也没事，会就更好）"><a href="#十四、加分项（不会也没事，会就更好）" class="headerlink" title="十四、加分项（不会也没事，会就更好）"></a>十四、加分项（不会也没事，会就更好）</h3><p>14.1、OpenGL ES</p>
<p>14.2、逆向</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS面试题收录（二）</title>
    <url>/2020/05/08/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>主题：怎么做？</p>
<h4 id="设计模式是什么？-你知道哪些设计模式，并简要叙述？"><a href="#设计模式是什么？-你知道哪些设计模式，并简要叙述？" class="headerlink" title="设计模式是什么？ 你知道哪些设计模式，并简要叙述？"></a>设计模式是什么？ 你知道哪些设计模式，并简要叙述？</h4><p><strong>设计模式</strong>是一套被 反复使用、多数人知晓、经过分类编目的、代码设计经验的总结。</p>
<p><strong>单例模式：</strong>单例模式确保某一个类只有一个实例，并提供一个访问它的全剧访问点。<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F4a1dYXPf1oSfZYS7J1IQRA" target="_blank" rel="noopener">具体的详情可点击进入查看</a><br><strong>工厂模式：</strong>工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生产具体的产品对象，即通过不停的工厂子类来创建不同的产品对象。<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fjuejin.im%2Fpost%2F5bcb0362e51d450e7042eb6d" target="_blank" rel="noopener">具体的详情可点击进入查看</a><br><strong>代理模式 :</strong>为某个对象提供一个代理，并由这个代理对象控制对原对象的访问。<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F22eVsnQP2cTccWwIaLfz5g" target="_blank" rel="noopener">具体的详情可点击进入查看</a><br><strong>适配器模式：</strong> 将一个接口转换成客户希望的另一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。适配器模式的别名是包装器模式（Wrapper），是一种结构型设计模式。<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F3abKTDIVy8BJJjThr2jgMQ" target="_blank" rel="noopener">具体的详情可点击进入查看</a><br><strong>装饰者模式：</strong> 不改变原有对象的前提下，动态地给一个对象增加一些额外的功能。<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkoaeYH1U-nfrsSQ8FH3hhQ" target="_blank" rel="noopener">具体的详情可点击进入查看</a></p>
<h4 id="MVC-和-MVVM-的区别？"><a href="#MVC-和-MVVM-的区别？" class="headerlink" title="MVC 和 MVVM 的区别？"></a>MVC 和 MVVM 的区别？</h4><p><strong>MVC</strong><br>MVC（Model-View-Controller）模式结构图，可分为三部分：模型（Model）、视图（View）、控制器（Controller）。其在MVC模式中所扮演的角色分别为：<br>Model：模型管理应用程序的数据，响应有关其状态信息（通常来自View）的请求，并响应指令以更改状态（通常来自Controller）。<br>View：视图管理数据的展示。<br>Controller：控制器解释用户的输入，并通知模型、视图进行状态更新<br>所有通信都是单向的。<br>优点：对Controller进行瘦身，将View内部的细节封装起来了，外界不知道View内部的具体实现<br>缺点：View和Controller依赖于Model</p>
<p><strong>MVVM</strong><br>MVVM（Model View View-Model）就是为了解决过于臃肿的问题。MVVM的思想是将Controller中UI控制逻辑与业务逻辑进行分离，并抽离出一个View-Model来完成UI控制的逻辑。而Controller只需要负责业务逻辑即可</p>
<p>唯一的区别是，View-Model可以调用Model定义的方法，从Model中获取数据以用于View，并对数据进行预处理，使View可以直接使用。View又可以向View-Model发出用户的操作命令，从而更改Model。MVVM实现了一种双向绑定机制。</p>
<p>优点：降低了View和Model之间的耦合；分离了业务逻辑和视图逻辑。<br>缺点：View和Model双向绑定导致bug难以定位，两者中的任何一方出现问题，另一方也会出现问题；增加了胶水代码</p>
<h4 id="iOS-内存的使用和优化的注意事项"><a href="#iOS-内存的使用和优化的注意事项" class="headerlink" title="iOS 内存的使用和优化的注意事项?"></a>iOS 内存的使用和优化的注意事项?</h4><p><strong>重用问题：</strong>如<code>UITableViewCells</code>、<code>UICollectionViewCells</code>、<code>UITableViewHeaderFooterViews</code>。设置正确的<code>reuseIdentifier</code>，充分重用<br><strong>不要使用太复杂的XIB/Storyboard：</strong>载入时就会将<code>XIB</code>/<code>storyboard</code>需要的所有资源，包括图片全部载入内存。<br><strong>尽量把views设置为不透明：</strong>当opque为NO的时候，图层的半透明取决于图片和其本身合成的图层为结果，可提高性能<br><strong>选择正确的数据结构：</strong>学会选择对业务场景最合适的数组结构是写出高效代码的基础。<br><strong>gzip/zip压缩：</strong>当从服务端下载相关附件时，可以通过gzip/zip压缩后再下载，使得内存更小，下载速度也更快。<br><strong>延迟加载：</strong>对于不应该使用的数据，使用延迟加载方式。对于不需要马上显示的视图，使用延迟加载方式。比如，网络请求失败时显示的提示界面，可能一直都不会使用到，因此应该使用延迟加载。<br><strong>数据缓存：</strong>对于cell的行高要缓存起来，使得reload数据时，效率也极高。<br>而对于那些网络数据，不需要每次都请求的，应该缓存起来。可以写入数据库，也可以通过plist文件存储<br><strong>处理内存警告：</strong>一般在基类统一处理内存警告，将相关不用资源立即释放掉</p>
<h4 id="iOS-你在项目中是怎么优化内存的？"><a href="#iOS-你在项目中是怎么优化内存的？" class="headerlink" title="iOS 你在项目中是怎么优化内存的？"></a>iOS 你在项目中是怎么优化内存的？</h4><blockquote>
<p>这个问题有时候笔试中也有，有时候有些面试官会在面试中问你这个问题</p>
</blockquote>
<p>1&gt;.避免庞大的Xib(Xib比frame消耗更多的CPU资源)<br>2&gt;.不要阻塞主线程，尽量把耗时的操作放到子线程<br>3&gt;.重用和延迟加载<br>4&gt;.尽量减少视图数量和层次<br>5&gt;.优化TableView,为了使TableVIew有更好的滚动性能可采取以下措施：</p>
<ul>
<li>正确使用ruseIdentifier来重用cells</li>
<li>采用懒加载即延迟加载的方式加载cell上的控件</li>
<li>当TableView滑动的时候不加载</li>
<li>缓存cell的高度。在呈现cell前，把cell的高度计算好缓存起来，避免每次加载cell的时候都要计算</li>
<li>尽量使用不透明的UI控件</li>
</ul>
<h4 id="写一个完整的代理，包括声明、实现"><a href="#写一个完整的代理，包括声明、实现" class="headerlink" title="写一个完整的代理，包括声明、实现"></a>写一个完整的代理，包括声明、实现</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">PersonDelagate</span></span></span><br><span class="line"><span class="keyword">@required</span></span><br><span class="line">-(<span class="keyword">void</span>)eat:(<span class="built_in">NSString</span> *)foodName;</span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">-(<span class="keyword">void</span>)run;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明 .h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span>: <span class="title">NSObject</span>&lt;<span class="title">PersonDelagate</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 .m</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)eat:(<span class="built_in">NSString</span> *)foodName &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"吃:%@"</span>, foodName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)run &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"run"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>



<h4 id="分析json、xml-的区别-json、xml-解析-式的底层是如何让处理的"><a href="#分析json、xml-的区别-json、xml-解析-式的底层是如何让处理的" class="headerlink" title="分析json、xml 的区别? json、xml 解析 式的底层是如何让处理的"></a>分析json、xml 的区别? json、xml 解析 式的底层是如何让处理的</h4><p>(一) JSON与XML的区别： </p>
<p>（1）可读性方面：基本相同，XML的可读性比较好； </p>
<p>（2）可扩展性方面：都具有良好的扩展性； </p>
<p>（3）编码难度方面：相对而言，JSON的编码比较容易； </p>
<p>（4）解码难度：JSON的解码难度基本为零，XML需要考虑子节点和父节点；</p>
<p>（5）数据体积方面：JSON相对于XML来讲，数据体积小，传递的速度比较快； </p>
<p>（6）数据交互方面：JSON与javascript的交互更加方便，更容易解析处理，更好的数据交互； </p>
<p>（7）数据描述方面：XML对数据描述性比较好 </p>
<p>（8）传输速度方面：JSON的速度远远快于XML。 </p>
<p>(二）JSON与XML底层实现原理： 　</p>
<p>（1）JSON底层原理：遍历字符串中的字符，最终根据格式规定的特殊字符，比如{}、[]、：等进行区分，{}号表示字典，[]号表示数组，：号是字典的键和值的分水岭，最终仍是将JSON转化为字典，只不过字典中的值可能是“字典、数组或者字符串而已”。 　　</p>
<p>（2）XML底层原理：XML解析常用的解析方法有两种：DOM解析和SAX解析；DOM采用的是树形结构的方式访问XML文档，而SAX采用的是事件模型；DOM解析把XML文档转化为一个包含其内容的树，并可以对树进行遍历，使用DOM解析器的时候需要处理整个XML文档，所以对内存和性能的要求比较高；SAX在解析XML文档的时候可以触发一系列的事件，当发现给定的tag的时候，他可以激活一个回调方法，告诉该方法指定的标签已经找到，SAX对内存的要求通常会比较低，因为他让开发人员自己来决定所要处理的tag，特别是当开发人员只需要处理文档中所包含部分数据时，SAX这种扩展能力得到了更好的体现。</p>
<h4 id="如何处理UITableVier-中Cell-动态计算高度的问题，都有哪些方案"><a href="#如何处理UITableVier-中Cell-动态计算高度的问题，都有哪些方案" class="headerlink" title="如何处理UITableVier 中Cell 动态计算高度的问题，都有哪些方案?"></a>如何处理UITableVier 中Cell 动态计算高度的问题，都有哪些方案?</h4><ol>
<li><p>你的Cell要使用AutoLayout来布局约束这是必须的； 设置tableview的estimatedRowHeight为一个非零值，这个属性是设置一个预估的高度值，不用太精确。 设置tableview的rowHeight属性为UITableViewAutomaticDimension</p>
</li>
<li><p>第三方 UITableView+FDTemplateLayoutCell</p>
</li>
</ol>
<h4 id="怎么高效的实现控件的圆角效果"><a href="#怎么高效的实现控件的圆角效果" class="headerlink" title="怎么高效的实现控件的圆角效果"></a>怎么高效的实现控件的圆角效果</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绘制圆角 </span></span><br><span class="line">-(<span class="built_in">UIImageView</span> *)roundedRectImageViewWithCornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius &#123; </span><br><span class="line">  <span class="built_in">UIBezierPath</span> *bezierPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="keyword">self</span>.bounds 		cornerRadius:cornerRadius]; </span><br><span class="line">  <span class="built_in">CAShapeLayer</span> *layer = [<span class="built_in">CAShapeLayer</span> layer]; </span><br><span class="line">  layer.path = bezierPath.CGPath; </span><br><span class="line">  <span class="keyword">self</span>.layer.mask = layer; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="假如Controller太臃肿，如何优化"><a href="#假如Controller太臃肿，如何优化" class="headerlink" title="假如Controller太臃肿，如何优化?"></a>假如Controller太臃肿，如何优化?</h4><ol>
<li><p>将网络请求抽象到单独的类中 方便在基类中处理公共逻辑； 方便在基类中处理缓存逻辑，以及其它一些公共逻辑； 方便做对象的持久化。 </p>
</li>
<li><p>将界面的封装抽象到专门的类中 构造专门的 UIView 的子类，来负责这些控件的拼装。这是最彻底和优雅的方式，不过稍微麻烦一些的是，你需要把这些控件的事件回调先接管，再都一一暴露回 Controller。 </p>
</li>
<li><p>构造 ViewModel 借鉴MVVM。具体做法就是将 ViewController 给 View 传递数据这个过程，抽象成构造 ViewModel 的过程。 </p>
</li>
<li><p>专门构造存储类 专门来处理本地数据的存取。 </p>
</li>
<li><p>整合常量</p>
</li>
</ol>
<h4 id="项目中网络层如何做安全处理"><a href="#项目中网络层如何做安全处理" class="headerlink" title="项目中网络层如何做安全处理?"></a>项目中网络层如何做安全处理?</h4><ol>
<li>判断API的调用请求是否来自于经过授权的APP。如若不是则拒绝请求访问 </li>
<li>在数据请求的过程中进行URL加密处理：防止反编译，接口信息被静态分析。 </li>
<li>数据传输加密：对客户端传输数据提供有效的加密方案，以防止网络接口的拦截。 如果可以尽量使用HTTPS，可以有效的避免接口数据在传输中被攻击。</li>
</ol>
]]></content>
      <categories>
        <category>iOS面试汇总</category>
      </categories>
  </entry>
  <entry>
    <title>iOS面试题收录（三）</title>
    <url>/2020/05/08/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E5%BD%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>主题：高级问题</p>
]]></content>
  </entry>
  <entry>
    <title>load和initialize方法的区别</title>
    <url>/2020/05/12/load%E5%92%8Cinitialize%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h4><p>1、load是根据函数地址直接调用</p>
<p>2、initialize是通过objc_msgSeng调用</p>
<h4 id="调用时刻"><a href="#调用时刻" class="headerlink" title="调用时刻"></a>调用时刻</h4><p>1、load是runtime加载类、分类的时候调用(只会调用一次)</p>
<p>2、initialize是类第一次接收到消息的时候调用, 每一个类只会initialize一次(如果子类没有实现initialize方法, 会调用父类的initialize方法, 所以父类的initialize方法可能会调用多次)</p>
<h4 id="load和initializee的调用顺序"><a href="#load和initializee的调用顺序" class="headerlink" title="load和initializee的调用顺序"></a>load和initializee的调用顺序</h4><p><strong>load</strong></p>
<p>1、先调用类的load</p>
<ul>
<li><p>先编译的类, 优先调用load（先编译，先调用）</p>
</li>
<li><p>调用子类的load之前, 会先调用父类的load</p>
</li>
</ul>
<p>2、再调用分类的load</p>
<ul>
<li>先编译的分类, 优先调用load（先编译，先调用）</li>
</ul>
<p><strong>initialize</strong></p>
<p>先调用父类的+initialize，再调用子类的+initialize。（先初始化父类，再初始化子类，每个类只会初始化1次）<br>如果分类实现了+initialize，会覆盖原有类的+initialize</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li><p>+initialize和+load的最大区别是</p>
<ul>
<li><p>initialize是通过objc_msgSeng调用，load是根据函数地址直接调用；</p>
</li>
<li><p>如果子类没有实现initialize方法, 会调用父类的initialize方法, 所以父类的initialize方法可能会调用多次</p>
</li>
<li><p>如果分类实现了+initialize，会覆盖原有类的+initialize</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>-iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS面试题收录（一）</title>
    <url>/2020/05/08/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>主题：是什么？</p>
<h4 id="关键字const什么含义？"><a href="#关键字const什么含义？" class="headerlink" title="关键字const什么含义？"></a>关键字const什么含义？</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> a;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *a;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> *a;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> a;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> * <span class="keyword">const</span> a;</span><br></pre></td></tr></table></figure>

<p>1&gt;. 前两个的作用是一样：a 是一个常整型数<br>2&gt;. 第三、四个意味着 a 是一个指向常整型数的指针(整型数是不可修改的，但指针可以)<br>3&gt;. 第五个的意思：a 是一个指向整型数的常指针(指针指向的整型数是可以修改的，但指针是不可修改的)<br>4&gt;. 最后一个意味着：a 是一个指向常整型数的常指针(指针指向的整型数是不可修改的，同时指针也是不可修改的)</p>
<h4 id="import跟-include-有什么区别，-class呢，-import-lt-gt-跟-import“”有什么区别？"><a href="#import跟-include-有什么区别，-class呢，-import-lt-gt-跟-import“”有什么区别？" class="headerlink" title="#import跟 #include 有什么区别，@class呢，#import&lt;&gt; 跟 #import“”有什么区别？"></a>#import跟 #include 有什么区别，@class呢，#import&lt;&gt; 跟 #import“”有什么区别？</h4><ol>
<li><p>#import是Objective-C导入头文件的关键字，#include是C/C++导入头文件的关键字，使用#import头文件会自动只导入一次，不会重复导入。</p>
</li>
<li><p>@class告诉编译器某个类的声明，当执行时，才去查看类的实现文件，可以解决头文件的相互包含。</p>
</li>
<li><p>#import&lt;&gt;用来包含系统的头文件，#import””用来包含用户头文件。</p>
</li>
</ol>
<h4 id="property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的？"><a href="#property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的？" class="headerlink" title="@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的？"></a>@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的？</h4><p>@property 的本质是:@property = ivar + getter + setter</p>
<p>“属性” (property)有两大概念：ivar（实例变量）、getter+setter（存取方法）</p>
<p>“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。</p>
<h4 id="property中有哪些属性关键字以及作用？"><a href="#property中有哪些属性关键字以及作用？" class="headerlink" title="@property中有哪些属性关键字以及作用？"></a>@property中有哪些属性关键字以及作用？</h4><p><strong>线程安全</strong></p>
<p><strong>nonatomic ：</strong>非原子操作。决定编译器生成的setter和getter方法是否是原子操作，一般使用nonatomic，效率高。<br><strong>atomic：</strong>多线程安全，但是性能低</p>
<p><strong>内存管理</strong></p>
<p><strong>strong：</strong>持有特性。setter方法将传入参数先保留，再赋值，传入参数的retaincount会+1。<br><strong>copy ：</strong>拷贝特性。setter方法将传入对象复制一份，需要完全一份新的变量时。<br><strong>assign：</strong>用于基本数据类型<br><strong>retain</strong>：相当于ARC中的strong</p>
<p><strong>读写操作</strong></p>
<p><strong>readwrite：</strong>可读可写特性。需要生成getter方法和setter方法<br><strong>readonly：</strong>只读特性。只会生成getter方法，不会生成setter方法，不希望属性在类外改变。</p>
<h4 id="什么情况使用-weak-关键字，相比-assign-有什么不同？"><a href="#什么情况使用-weak-关键字，相比-assign-有什么不同？" class="headerlink" title="什么情况使用 weak 关键字，相比 assign 有什么不同？"></a>什么情况使用 weak 关键字，相比 assign 有什么不同？</h4><p>1&gt;.在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性。<br>2&gt;.自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak（因为父控件的subViews数组已经对它有一个强引用）。</p>
<p>不同点：<br>assign 可以用非 OC 对象，而 weak 必须用于 OC 对象。<br>weak 表明该属性定义了一种“非拥有关系”。在属性所指的对象销毁时，属性值会自动清空(nil)。</p>
<h4 id="用-property声明的-NSString-NSArray-NSDictionary-经常使用-copy-关键字，为什么？如果改用strong关键字，可能造成什么问题？"><a href="#用-property声明的-NSString-NSArray-NSDictionary-经常使用-copy-关键字，为什么？如果改用strong关键字，可能造成什么问题？" class="headerlink" title="用@property声明的 NSString / NSArray / NSDictionary 经常使用 copy 关键字，为什么？如果改用strong关键字，可能造成什么问题？"></a>用@property声明的 NSString / NSArray / NSDictionary 经常使用 copy 关键字，为什么？如果改用strong关键字，可能造成什么问题？</h4><p>用 @property 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作（就是把可变的赋值给不可变的），为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。</p>
<p>1&gt;. 因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本。<br>2&gt;. 如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性。<br>总结：使用copy的目的是，防止把可变类型的对象赋值给不可变类型的对象时，可变类型对象的值发送变化会无意间篡改不可变类型对象原来的值。</p>
<h4 id="浅拷贝和深拷贝的区别？"><a href="#浅拷贝和深拷贝的区别？" class="headerlink" title="浅拷贝和深拷贝的区别？"></a>浅拷贝和深拷贝的区别？</h4><p><strong>浅拷贝：</strong>对一个对象地址的拷贝。源对象和副本对象是同一对象<br><strong>深拷贝：</strong>对一个对象的拷贝。源对象和副本对象是不同的两个对象</p>
<h4 id="self-跟self-gt-什么区别？"><a href="#self-跟self-gt-什么区别？" class="headerlink" title="self.跟self-&gt;什么区别？"></a>self.跟self-&gt;什么区别？</h4><p>1&gt;. self.是调用get方法或者set放<br>2&gt;. self是当前本身，是一个指向当前对象的指针<br>3&gt;. self-&gt;是直接访问成员变量</p>
<h4 id="一个objc对象的isa的指针指向什么？有什么作用？"><a href="#一个objc对象的isa的指针指向什么？有什么作用？" class="headerlink" title="一个objc对象的isa的指针指向什么？有什么作用？"></a>一个objc对象的isa的指针指向什么？有什么作用？</h4><p>指向他的类对象,从而可以找到对象上的方法</p>
<h4 id="frame-和-bounds-有什么不同？"><a href="#frame-和-bounds-有什么不同？" class="headerlink" title="frame 和 bounds 有什么不同？"></a>frame 和 bounds 有什么不同？</h4><p><strong>frame：</strong>该view在父view坐标系统中的位置和大小。(参照点是父view的坐标系统)</p>
<p><strong>bounds：</strong>该view在本身坐标系统中的位置和大小。(参照点是本身坐标系统)</p>
<h4 id="Objective-C的类可以多重继承么？没有的话用什么代替？可以实现多个接口么？Category是什么？重写一个类的方式用继承好还是分类好？为什么？"><a href="#Objective-C的类可以多重继承么？没有的话用什么代替？可以实现多个接口么？Category是什么？重写一个类的方式用继承好还是分类好？为什么？" class="headerlink" title="Objective-C的类可以多重继承么？没有的话用什么代替？可以实现多个接口么？Category是什么？重写一个类的方式用继承好还是分类好？为什么？"></a>Objective-C的类可以多重继承么？没有的话用什么代替？可以实现多个接口么？Category是什么？重写一个类的方式用继承好还是分类好？为什么？</h4><p>OC不可以多继承，OC是单继承。有时可以用分类和协议来代替多继承<br>可以实现多个接口（协议）<br>Category是类别；一般情况用分类好，用Category去重写类的方法，仅对本Category有效，不会影响到其他类与原有类的关系。</p>
<h4 id="Object-C有私有方法吗？私有变量呢？"><a href="#Object-C有私有方法吗？私有变量呢？" class="headerlink" title="Object-C有私有方法吗？私有变量呢？"></a>Object-C有私有方法吗？私有变量呢？</h4><p>1&gt;.OC没有类似@private的修饰词来修饰方法，只要写在.h文件中，就是公共方法<br>2&gt;. 如果你不在.h文件中声明，只在.m文件中实现，或在.m文件的Class Extension里声明，那么基本上和私有方法差不多，可以使用类扩展（Extension）来增加私有方法和私有变量<br>3&gt;. 使用private修饰的全局变量是私有变量</p>
<h4 id="用伪代码写一个线程安全的单例模式"><a href="#用伪代码写一个线程安全的单例模式" class="headerlink" title="用伪代码写一个线程安全的单例模式"></a>用伪代码写一个线程安全的单例模式</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> XXManager * instance = <span class="literal">nil</span>;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)shareInstance &#123;</span><br><span class="line">      <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">      <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)allocWithZone:(<span class="keyword">struct</span> _NSZone *)zone &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">      <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [<span class="keyword">super</span> allocWithZone:zone];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="category-类别-和-extension-扩展-的区别"><a href="#category-类别-和-extension-扩展-的区别" class="headerlink" title="category(类别) 和 extension(扩展) 的区别"></a>category(类别) 和 extension(扩展) 的区别</h4><p>1&gt;. 类别有名字，类扩展没有分类名字，是一种特殊的分类。<br>2&gt;. 类别只能扩展方法（属性仅仅是声明，并没真正实现），类扩展可以扩展属性、成员变量和方法。<br>3&gt;. 继承可以增加，修改或者删除方法，并且可以增加属性。</p>
<h4 id="delegate-和-notification-的区别"><a href="#delegate-和-notification-的区别" class="headerlink" title="delegate 和 notification 的区别"></a>delegate 和 notification 的区别</h4><p>二者都用于传递消息，不同之处主要在于一个是一对一的，另一个是一对多的<br><strong>notification：</strong>不需要两者之间有联系,实现一对多消息的转发<br><strong>delegate：</strong>需要两者之间必须建立联系，不然没法调用代理的方法</p>
<h4 id="Objective-C-如何对内存管理的，说说你的看法和解决方法？"><a href="#Objective-C-如何对内存管理的，说说你的看法和解决方法？" class="headerlink" title="Objective-C 如何对内存管理的，说说你的看法和解决方法？"></a>Objective-C 如何对内存管理的，说说你的看法和解决方法？</h4><p>Objective-C的内存管理主要有三种方式ARC(自动内存计数)、手动内存计数、内存池。<br>1&gt;. 自动内存计数ARC：由Xcode自动在App编译阶段，在代码中添加内存管理代码。<br>2&gt;. 手动内存计数MRC：遵循内存谁申请、谁释放；谁添加，谁释放的原则。<br>3&gt;. 内存释放池Release Pool：把需要释放的内存统一放在一个池子中，当池子被抽干后(drain)，池子中所有的内存空间也被自动释放掉。内存池的释放操作分为自动和手动。自动释放受runloop机制影响。</p>
<h4 id="GCD-与-NSOperation-的区别"><a href="#GCD-与-NSOperation-的区别" class="headerlink" title="GCD 与 NSOperation 的区别"></a>GCD 与 NSOperation 的区别</h4><p><strong>NSOperation:</strong>相对于GCD来说，更加强大。可以给operation之间添加依赖关系、取消一个正在执行的operation、暂停和恢复operationQueue等</p>
<p><strong>GCD:</strong> 是一种更轻量级的，以FIFO(先进先出，后进后出)的顺序执行并发任务。使用GCD我们并不用关心任务的调度情况，而是系统会自动帮我们处理。但是GCD的短板也是非常明显的，比如我们想要给任务之间添加依赖关系、取消或者暂停一个正在执行的任务时就会变得束手无策。</p>
<h4 id="OC中创建线程的方法是什么？如果在主线程中执行代码，方法是什么？"><a href="#OC中创建线程的方法是什么？如果在主线程中执行代码，方法是什么？" class="headerlink" title="OC中创建线程的方法是什么？如果在主线程中执行代码，方法是什么？"></a>OC中创建线程的方法是什么？如果在主线程中执行代码，方法是什么？</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建线程的方法</span></span><br><span class="line"></span><br><span class="line">- [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="literal">nil</span> toTarget:<span class="literal">nil</span> withObject:<span class="literal">nil</span>]</span><br><span class="line"></span><br><span class="line">- [<span class="keyword">self</span> performSelectorInBackground:<span class="literal">nil</span> withObject:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">- [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="literal">nil</span> selector:<span class="literal">nil</span> object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">- <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;&#125;);</span><br><span class="line"></span><br><span class="line">- [[<span class="built_in">NSOperationQueue</span> new] addOperation:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程中执行代码的方法</span></span><br><span class="line"></span><br><span class="line">- [<span class="keyword">self</span> performSelectorOnMainThread:<span class="literal">nil</span> withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">- <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;&#125;);</span><br><span class="line"></span><br><span class="line">- [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperation:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>



<h4 id="runloop-和线程有什么关系"><a href="#runloop-和线程有什么关系" class="headerlink" title="runloop 和线程有什么关系?"></a>runloop 和线程有什么关系?</h4><p>runloop与线程是一一对应的，一个runloop对应一个核心的线程，为什么说是核心的，是因为runloop是可以嵌套的，但是核心的只能有一个，他们的关系保存在一个全局的字典里。 runloop是来管理线程的，当线程的runloop被开启后，线程会在执行完任务后进入休眠状态，有了任务就会被唤醒去执行任务。 runloop在第一次获取时被创建，在线程结束时被销毁。 对于主线程来说，runloop在程序一启动就默认创建好了。 对于子线程来说，runloop是懒加载的，只有当我们使用的时候才会创建，所以在子线程用定时器要注意：确保子线程的runloop被创建，不然定时器不会回调。</p>
<h4 id="介绍下layoutSubview和drawRect"><a href="#介绍下layoutSubview和drawRect" class="headerlink" title="介绍下layoutSubview和drawRect"></a>介绍下layoutSubview和drawRect</h4><p>layoutSubviews调用情况</p>
<ul>
<li><p>init初始化UIView不会触发调用 </p>
</li>
<li><p>addSubview会触发调用 </p>
</li>
<li><p>改变view的width和height的时候回触发</p>
</li>
<li><p>调用 一个UIScrollView滚动会触发调用 </p>
</li>
<li><p>旋转screen会触发调用 </p>
</li>
<li><p>改变一个UIView大小的时候会触发</p>
</li>
<li><p>superView的layoutSubviews事件 直接调用setLayoutSubviews会触发调用 </p>
</li>
<li><p>-(void)viewWillAppear:(BOOL)animated会触发一次调用</p>
</li>
<li><p>-(void)viewDidAppear:(BOOL)animated 看情况</p>
<p>可能有调用 drawRect调用情况 </p>
</li>
<li><p>如果UIView没有设置frame大小，直接导致drawRect不能被自动调用。 </p>
</li>
<li><p>drawRect在loadView和viewDidLoad这两个方法之后调用 调用sizeToFit后自动调用drawRect </p>
</li>
<li><p>通过设置contentMode值为UIViewContentModeRedraw。那么每次设置或者更改frame自动调用drawRect。 </p>
</li>
<li><p>直接调用setNeedsDisplay或者setNeedsDisplayInRect会触发调用</p>
</li>
</ul>
<h4 id="UIview-和CAlayer-是什么关系-你-CLayer做过什么"><a href="#UIview-和CAlayer-是什么关系-你-CLayer做过什么" class="headerlink" title="UIview 和CAlayer 是什么关系? 你 CLayer做过什么?"></a>UIview 和CAlayer 是什么关系? 你 CLayer做过什么?</h4><p>区别： 首先UIView可以响应事件，Layer不可以.</p>
<p>关系：</p>
<ol>
<li>UIView是CALayer的delegate </li>
<li>UIView主要处理事件，CALayer负责绘制就更好 </li>
<li>每个 UIView 内部都有一个 CALayer 在背后提供内容的绘制和显示，并且 UIView 的尺寸样式都由内部的 Layer 所提供。两者都有树状层级结构，layer 内部有 SubLayers，View 内部有 SubViews.但是 Layer 比 View 多了个AnchorPoint </li>
</ol>
<p>用layer做过什么：创建隐式动画 绘制边框圆角</p>
<h4 id="iOS-UIViewController的完整生命周期"><a href="#iOS-UIViewController的完整生命周期" class="headerlink" title="iOS UIViewController的完整生命周期?"></a>iOS UIViewController的完整生命周期?</h4><p>按照执行顺序排列：</p>
<p>1&gt;. <code>initWithCoder：</code>通过nib文件初始化时触发。<br>2&gt;. <code>awakeFromNib：</code>nib文件被加载的时候，会发生一个<code>awakeFromNib</code>的消息到nib文件中的每个对象。<br>3&gt;. <code>loadView：</code>开始加载视图控制器自带的view。<br>4&gt;. <code>viewDidLoad：</code>视图控制器的view被加载完成。<br>5&gt;. <code>viewWillAppear：</code>视图控制器的view将要显示在window上。<br>6&gt;. <code>updateViewConstraints：</code>视图控制器的view开始更新AutoLayout约束。<br>7&gt;. <code>viewWillLayoutSubviews：</code>视图控制器的view将要更新内容视图的位置。<br>8&gt;. <code>viewDidLayoutSubviews：</code>视图控制器的view已经更新视图的位置。<br>9&gt;. <code>viewDidAppear：</code>视图控制器的view已经展示到window上。<br>10&gt;. <code>viewWillDisappear：</code>视图控制器的view将要从window上消失。<br>11&gt;.<code>viewDidDisappear：</code>视图控制器的view已经从window上消失。</p>
<h4 id="tableView的重用机制？"><a href="#tableView的重用机制？" class="headerlink" title="tableView的重用机制？"></a>tableView的重用机制？</h4><p>UITableView 通过重用单元格来达到节省内存的目的: 通过为每个单元格指定一个重用标识符，即指定了单元格的种类,当屏幕上的单元格滑出屏幕时，系统会把这个单元格添加到重用队列中，等待被重用，当有新单元格从屏幕外滑入屏幕内时，从重用队列中找看有没有可以重用的单元格，如果有，就拿过来用，如果没有就创建一个来使用</p>
<h4 id="NSIRLConnection-和NSLRLSession-的区别是-么-NSURLProtocol是做什么的"><a href="#NSIRLConnection-和NSLRLSession-的区别是-么-NSURLProtocol是做什么的" class="headerlink" title="NSIRLConnection 和NSLRLSession 的区别是 么? NSURLProtocol是做什么的?"></a>NSIRLConnection 和NSLRLSession 的区别是 么? NSURLProtocol是做什么的?</h4><ol>
<li><p>下载 NSURLConnection下载文件时，先是将整个文件下载到内存，然后再写入到沙盒，如果文件比较大，就会出现内存暴涨的情况。 而使用NSURLSessionUploadTask下载文件，会默认下载到沙盒中的tem文件中，不会出现内存暴涨的情况，但是在下载完成后会把tem中的临时文件删除，需要在初始化任务方法时，在completionHandler回调中增加保存文件的代码 </p>
</li>
<li><p>请求方法的控制 NSURLConnection实例化对象，实例化开始，默认请求就发送(同步发送),不需要调用start方法。而cancel可以停止请求的发送，停止后不能继续访问，需要创建新的请求。 NSURLSession有三个控制方法，取消(cancel)、暂停(suspend)、继续(resume)，暂停以后可以通过继续恢复当前的请求任务。 使用NSURLSession进行断点下载更加便捷. NSURLSession的构造方法（sessionWithConfiguration:delegate:delegateQueue）中有一个NSURLSessionConfiguration类的参数可以设置配置信息，其决定了cookie，安全和高速缓存策略，最大主机连接数，资源管理，网络超时等配置。NSURLConnection不能进行这个配置，相比较与NSURLConnection依赖与一个全局的配置对象，缺乏灵活性而言，NSURLSession有很大的改进</p>
</li>
</ol>
]]></content>
      <categories>
        <category>iOS面试汇总</category>
      </categories>
  </entry>
</search>
